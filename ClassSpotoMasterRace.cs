using System;
using System.Collections.Generic;
using System.ComponentModel;

namespace SpotoMasterRace
{
    static internal class ClassSpotoMasterRace
    {
        #region Tables

        #region Tables and Indexes

        static internal double[,] zTable = new double[70, 10] {
            //         .00    .01    .02    .03    .04    .05    .06    .07    .08    .09
            /*-3.4*/ { .0003, .0003, .0003, .0003, .0003, .0003, .0003, .0003, .0003, .0002 },
            /*-3.3*/ { .0005, .0005, .0005, .0004, .0004, .0004, .0004, .0004, .0004, .0003 },
            /*-3.2*/ { .0007, .0007, .0006, .0006, .0006, .0006, .0006, .0005, .0005, .0005 },
            /*-3.1*/ { .0010, .0009, .0009, .0009, .0008, .0008, .0008, .0008, .0007, .0007 },
            /*-3.0*/ { .0013, .0013, .0013, .0012, .0012, .0011, .0011, .0011, .0010, .0010 },
            /*-2.9*/ { .0019, .0018, .0018, .0017, .0016, .0016, .0015, .0015, .0014, .0014 },
            /*-2.8*/ { .0026, .0025, .0024, .0023, .0023, .0022, .0021, .0021, .0020, .0019 },
            /*-2.7*/ { .0035, .0034, .0033, .0032, .0031, .0030, .0029, .0028, .0027, .0026 },
            /*-2.6*/ { .0047, .0045, .0044, .0043, .0041, .0040, .0039, .0038, .0037, .0036 },
            /*-2.5*/ { .0062, .0060, .0059, .0057, .0055, .0054, .0052, .0051, .0049, .0048 },
            /*-2.4*/ { .0082, .0080, .0078, .0075, .0073, .0071, .0069, .0068, .0066, .0064 },
            /*-2.3*/ { .0107, .0104, .0102, .0099, .0096, .0094, .0091, .0089, .0087, .0084 },
            /*-2.2*/ { .0139, .0136, .0132, .0129, .0125, .0122, .0119, .0116, .0113, .0110 },
            /*-2.1*/ { .0179, .0174, .0170, .0166, .0162, .0158, .0154, .0150, .0146, .0143 },
            /*-2.0*/ { .0228, .0222, .0217, .0212, .0207, .0202, .0197, .0192, .0188, .0183 },
            /*-1.9*/ { .0287, .0281, .0274, .0268, .0262, .0256, .0250, .0244, .0239, .0233 },
            /*-1.8*/ { .0359, .0351, .0344, .0336, .0329, .0322, .0314, .0307, .0301, .0294 },
            /*-1.7*/ { .0446, .0436, .0427, .0418, .0409, .0401, .0392, .0384, .0375, .0367 },
            /*-1.6*/ { .0548, .0537, .0526, .0516, .0505, .0495, .0485, .0475, .0465, .0455 },
            /*-1.5*/ { .0668, .0655, .0643, .0630, .0618, .0606, .0594, .0582, .0571, .0559 },
            /*-1.4*/ { .0808, .0793, .0778, .0764, .0749, .0735, .0721, .0708, .0694, .0681 },
            /*-1.3*/ { .0968, .0951, .0934, .0918, .0901, .0885, .0869, .0853, .0838, .0823 },
            /*-1.2*/ { .1151, .1131, .1112, .1093, .1075, .1056, .1038, .1020, .1003, .0985 },
            /*-1.1*/ { .1357, .1335, .1314, .1292, .1271, .1251, .1230, .1210, .1190, .1170 },
            /*-1.0*/ { .1587, .1562, .1539, .1515, .1492, .1469, .1446, .1423, .1401, .1379 },
            /*-0.9*/ { .1841, .1814, .1788, .1762, .1736, .1711, .1685, .1660, .1635, .1611 },
            /*-0.8*/ { .2119, .2090, .2061, .2033, .2005, .1977, .1949, .1922, .1894, .1867 },
            /*-0.7*/ { .2420, .2389, .2358, .2327, .2296, .2266, .2236, .2206, .2177, .2148 },
            /*-0.6*/ { .2743, .2709, .2676, .2643, .2611, .2578, .2546, .2514, .2483, .2451 },
            /*-0.5*/ { .3085, .3050, .3015, .2981, .2946, .2912, .2877, .2843, .2810, .2776 },
            /*-0.4*/ { .3446, .3409, .3372, .3336, .3300, .3264, .3228, .3192, .3156, .3121 },
            /*-0.3*/ { .3821, .3783, .3745, .3707, .3669, .3632, .3594, .3557, .3520, .3483 },
            /*-0.2*/ { .4207, .4168, .4129, .4090, .4052, .4013, .3974, .3936, .3897, .3859 },
            /*-0.1*/ { .4602, .4562, .4522, .4483, .4443, .4404, .4364, .4325, .4286, .4247 },
            /*-0.0*/ { .5000, .4960, .4920, .4880, .4840, .4801, .4761, .4721, .4681, .4641 },
            /*0.0*/  { .5000, .5040, .5080, .5120, .5160, .5199, .5239, .5279, .5319, .5359 },
            /*0.1*/  { .5398, .5438, .5478, .5517, .5557, .5596, .5636, .5675, .5714, .5753 },
            /*0.2*/  { .5793, .5832, .5871, .5910, .5948, .5987, .6026, .6064, .6103, .6141 },
            /*0.3*/  { .6179, .6217, .6255, .6293, .6331, .6368, .6406, .6443, .6480, .6517 },
            /*0.4*/  { .6554, .6591, .6628, .6664, .6700, .6736, .6772, .6808, .6844, .6879 },
            /*0.5*/  { .6915, .6950, .6985, .7019, .7054, .7088, .7123, .7157, .7190, .7224 },
            /*0.6*/  { .7257, .7291, .7324, .7357, .7389, .7422, .7454, .7486, .7517, .7549 },
            /*0.7*/  { .7580, .7611, .7642, .7673, .7704, .7734, .7764, .7794, .7823, .7852 },
            /*0.8*/  { .7881, .7910, .7939, .7967, .7995, .8023, .8051, .8078, .8106, .8133 },
            /*0.9*/  { .8159, .8186, .8212, .8238, .8264, .8289, .8315, .8340, .8365, .8389 },
            /*1.0*/  { .8413, .8438, .8461, .8485, .8508, .8531, .8554, .8577, .8599, .8621 },
            /*1.1*/  { .8643, .8665, .8686, .8708, .8729, .8749, .8770, .8790, .8810, .8830 },
            /*1.2*/  { .8849, .8869, .8888, .8907, .8925, .8944, .8962, .8980, .8997, .9015 },
            /*1.3*/  { .9032, .9049, .9066, .9082, .9099, .9115, .9131, .9147, .9162, .9177 },
            /*1.4*/  { .9192, .9207, .9222, .9236, .9251, .9265, .9279, .9292, .9306, .9319 },
            /*1.5*/  { .9332, .9345, .9357, .9370, .9382, .9394, .9406, .9418, .9429, .9441 },
            /*1.6*/  { .9452, .9463, .9474, .9484, .9495, .9505, .9515, .9525, .9535, .9545 },
            /*1.7*/  { .9554, .9564, .9573, .9582, .9591, .9599, .9608, .9616, .9625, .9633 },
            /*1.8*/  { .9641, .9649, .9656, .9664, .9671, .9678, .9686, .9693, .9699, .9706 },
            /*1.9*/  { .9713, .9719, .9726, .9732, .9738, .9744, .9750, .9756, .9761, .9767 },
            /*2.0*/  { .9772, .9778, .9783, .9788, .9793, .9798, .9803, .9808, .9812, .9817 },
            /*2.1*/  { .9821, .9826, .9830, .9834, .9838, .9842, .9846, .9850, .9854, .9857 },
            /*2.2*/  { .9861, .9864, .9868, .9871, .9875, .9878, .9881, .9884, .9887, .9890 },
            /*2.3*/  { .9893, .9896, .9898, .9901, .9904, .9906, .9909, .9911, .9913, .9916 },
            /*2.4*/  { .9918, .9920, .9922, .9925, .9927, .9929, .9931, .9932, .9934, .9936 },
            /*2.5*/  { .9938, .9940, .9941, .9943, .9945, .9946, .9948, .9949, .9951, .9952 },
            /*2.6*/  { .9953, .9955, .9956, .9957, .9959, .9960, .9961, .9962, .9963, .9964 },
            /*2.7*/  { .9965, .9966, .9967, .9968, .9969, .9970, .9971, .9972, .9973, .9974 },
            /*2.8*/  { .9974, .9975, .9976, .9977, .9977, .9978, .9979, .9979, .9980, .9981 },
            /*2.9*/  { .9981, .9982, .9982, .9983, .9984, .9984, .9985, .9985, .9986, .9986 },
            /*3.0*/  { .9987, .9987, .9987, .9988, .9988, .9989, .9989, .9989, .9990, .9990 },
            /*3.1*/  { .9990, .9991, .9991, .9991, .9992, .9992, .9992, .9992, .9993, .9993 },
            /*3.2*/  { .9993, .9993, .9994, .9994, .9994, .9994, .9994, .9995, .9995, .9995 },
            /*3.3*/  { .9995, .9995, .9995, .9996, .9996, .9996, .9996, .9996, .9996, .9997 },
            /*3.4*/  { .9997, .9997, .9997, .9997, .9997, .9997, .9997, .9997, .9997, .9998 } };

        static private Dictionary<string, int> zTableRowIndex = new Dictionary<string, int> {
            { "-3.4", 0 }, { "-3.3", 1 }, { "-3.2", 2 }, { "-3.1", 3 }, { "-3.0", 4 },
            { "-2.9", 5 }, { "-2.8", 6 }, { "-2.7", 7 }, { "-2.6", 8 }, { "-2.5", 9 },
            { "-2.4", 10 }, { "-2.3", 11 }, { "-2.2", 12 }, { "-2.1", 13 }, { "-2.0", 14 },
            { "-1.9", 15 }, { "-1.8", 16 }, { "-1.7", 17 }, { "-1.6", 18 }, { "-1.5", 19 },
            { "-1.4", 20 }, { "-1.3", 21 }, { "-1.2", 22 }, { "-1.1", 23 }, { "-1.0", 24 },
            { "-0.9", 25 }, { "-0.8", 26 }, { "-0.7", 27 }, { "-0.6", 28 }, { "-0.5", 29 },
            { "-0.4", 30 }, { "-0.3", 31 }, { "-0.2", 32 }, { "-0.1", 33 }, { "-0.0", 34 },
            { "0.0", 35 }, { "0.1", 36 }, { "0.2", 37 }, { "0.3", 38 }, { "0.4", 39 },
            { "0.5", 40 }, { "0.6", 41 }, { "0.7", 42 }, { "0.8", 43 }, { "0.9", 44 },
            { "1.0", 45 }, { "1.1", 46 }, { "1.2", 47 }, { "1.3", 48 }, { "1.4", 49 },
            { "1.5", 50 }, { "1.6", 51 }, { "1.7", 52 }, { "1.8", 53 }, { "1.9", 54 },
            { "2.0", 55 }, { "2.1", 56 }, { "2.2", 57 }, { "2.3", 58 }, { "2.4", 59 },
            { "2.5", 60 }, { "2.6", 61 }, { "2.7", 62 }, { "2.8", 63 }, { "2.9", 64 },
            { "3.0", 65 }, { "3.1", 66 }, { "3.2", 67 }, { "3.3", 68 }, { "3.4", 69 },
            { "+0.0", 35 }, { "+0.1", 36 }, { "+0.2", 37 }, { "+0.3", 38 }, { "+0.4", 39 },
            { "+0.5", 40 }, { "+0.6", 41 }, { "+0.7", 42 }, { "+0.8", 43 }, { "+0.9", 44 },
            { "+1.0", 45 }, { "+1.1", 46 }, { "+1.2", 47 }, { "+1.3", 48 }, { "+1.4", 49 },
            { "+1.5", 50 }, { "+1.6", 51 }, { "+1.7", 52 }, { "+1.8", 53 }, { "+1.9", 54 },
            { "+2.0", 55 }, { "+2.1", 56 }, { "+2.2", 57 }, { "+2.3", 58 }, { "+2.4", 59 },
            { "+2.5", 60 }, { "+2.6", 61 }, { "+2.7", 62 }, { "+2.8", 63 }, { "+2.9", 64 },
            { "+3.0", 65 }, { "+3.1", 66 }, { "+3.2", 67 }, { "+3.3", 68 }, { "+3.4", 69 } };

        static internal double[,] chiSquareTable = new double[37, 10] {
            //        .995    .990    .975    .950    .900    .100     .050     .025     .010     .005
            /*1*/   { 0.000,  0.000,  0.001,  0.004,  0.016,  2.706,   3.841,   5.024,   6.635,   7.879   },
            /*2*/   { 0.010,  0.020,  0.051,  0.103,  0.211,  4.605,   5.991,   7.378,   9.210,   10.597  },
            /*3*/   { 0.072,  0.115,  0.216,  0.352,  0.584,  6.251,   7.815,   9.348,   11.345,  12.838  },
            /*4*/   { 0.207,  0.297,  0.484,  0.711,  1.064,  7.779,   9.488,   11.143,  13.277,  14.860  },
            /*5*/   { 0.412,  0.554,  0.831,  1.145,  1.610,  9.236,   11.070,  12.833,  15.086,  16.750  },
            /*6*/   { 0.676,  0.872,  1.237,  1.635,  2.204,  10.645,  12.592,  14.449,  16.812,  18.548  },
            /*7*/   { 0.989,  1.239,  1.690,  2.167,  2.833,  12.017,  14.067,  16.013,  18.475,  20.278  },
            /*8*/   { 1.344,  1.646,  2.180,  2.733,  3.490,  13.362,  15.507,  17.535,  20.090,  21.955  },
            /*9*/   { 1.735,  2.088,  2.700,  3.325,  4.168,  14.684,  16.919,  19.023,  21.666,  23.589  },
            /*10*/  { 2.156,  2.558,  3.247,  3.940,  4.865,  15.987,  18.307,  20.483,  23.209,  25.188  },
            /*11*/  { 2.603,  3.053,  3.816,  4.575,  5.578,  17.275,  19.675,  21.920,  24.725,  26.757  },
            /*12*/  { 3.074,  3.571,  4.404,  5.226,  6.304,  18.549,  21.026,  23.337,  26.217,  28.300  },
            /*13*/  { 3.565,  4.107,  5.009,  5.892,  7.042,  19.812,  22.362,  24.736,  27.688,  29.819  },
            /*14*/  { 4.075,  4.660,  5.629,  6.571,  7.790,  21.064,  23.685,  26.119,  29.141,  31.319  },
            /*15*/  { 4.601,  5.229,  6.262,  7.261,  8.547,  22.307,  24.996,  27.488,  30.578,  32.801  },
            /*16*/  { 5.142,  5.812,  6.908,  7.962,  9.312,  23.542,  26.296,  28.845,  32.000,  34.267  },
            /*17*/  { 5.697,  6.408,  7.564,  8.672,  10.085, 24.769,  27.587,  30.191,  33.409,  35.718  },
            /*18*/  { 6.265,  7.015,  8.231,  9.390,  10.865, 25.989,  28.869,  31.526,  34.805,  37.156  },
            /*19*/  { 6.844,  7.633,  8.907,  10.117, 11.651, 27.204,  30.144,  32.852,  36.191,  38.582  },
            /*20*/  { 7.434,  8.260,  9.591,  10.851, 12.443, 28.412,  31.410,  34.170,  37.566,  39.997  },
            /*21*/  { 8.034,  8.897,  10.283, 11.591, 13.240, 29.615,  32.671,  35.479,  38.932,  41.401  },
            /*22*/  { 8.643,  9.542,  10.982, 12.338, 14.041, 30.813,  33.924,  36.781,  40.289,  42.796  },
            /*23*/  { 9.260,  10.196, 11.689, 13.091, 14.848, 32.007,  35.172,  38.076,  41.638,  44.181  },
            /*24*/  { 9.886,  10.856, 12.401, 13.848, 15.659, 33.196,  36.415,  39.364,  42.980,  45.559  },
            /*25*/  { 10.520, 11.524, 13.120, 14.611, 16.473, 34.382,  37.652,  40.646,  44.314,  46.928  },
            /*26*/  { 11.160, 12.198, 13.844, 15.379, 17.292, 35.563,  38.885,  41.923,  45.642,  48.290  },
            /*27*/  { 11.808, 12.879, 14.573, 16.151, 18.114, 36.741,  40.113,  43.195,  46.963,  49.645  },
            /*28*/  { 12.461, 13.565, 15.308, 16.928, 18.939, 37.916,  41.337,  44.461,  48.278,  50.993  },
            /*29*/  { 13.121, 14.256, 16.047, 17.708, 19.768, 39.087,  42.557,  45.722,  49.588,  52.336  },
            /*30*/  { 13.787, 14.953, 16.791, 18.493, 20.599, 40.256,  43.773,  46.979,  50.892,  53.672  },
            /*40*/  { 20.707, 22.164, 24.433, 26.509, 29.051, 51.805,  55.758,  59.342,  63.691,  66.766  },
            /*50*/  { 27.991, 29.707, 32.357, 34.764, 37.689, 63.167,  67.505,  71.420,  76.154,  79.490  },
            /*60*/  { 35.534, 37.485, 40.482, 43.188, 46.459, 74.397,  79.082,  83.298,  88.379,  91.952  },
            /*70*/  { 43.275, 45.442, 48.758, 51.739, 55.329, 85.527,  90.531,  95.023,  100.425, 104.215 },
            /*80*/  { 51.172, 53.540, 57.153, 60.391, 64.278, 96.578,  101.879, 106.629, 112.329, 116.321 },
            /*90*/  { 59.196, 61.754, 65.647, 69.126, 73.291, 107.565, 113.145, 118.136, 124.116, 128.299 },
            /*100*/ { 67.328, 70.065, 74.222, 77.929, 82.358, 118.498, 124.342, 129.561, 135.807, 140.169 } };

        static private Dictionary<int, int> chiSquareTableRowIndex = new Dictionary<int, int> {
            { 1, 0 }, { 2, 1 }, { 3, 2 }, { 4, 3 }, { 5, 4 },
            { 6, 5 }, { 7, 6 }, { 8, 7 }, { 9, 8 }, { 10, 9 },
            { 11, 10 }, { 12, 11 }, { 13, 12 }, { 14, 13 }, { 15, 14 },
            { 16, 15 }, { 17, 16 }, { 18, 17 }, { 19, 18 }, { 20, 19 },
            { 21, 20 }, { 22, 21 }, { 23, 22 }, { 24, 23 }, { 25, 24 },
            { 26, 25 }, { 27, 26 }, { 28, 27 }, { 29, 28 }, { 30, 29 },
            { 40, 30 }, { 50, 31 }, { 60, 32 }, { 70, 33 }, { 80, 34 },
            { 90, 35 }, { 100, 36 } };

        static private Dictionary<double, int> chiSquareTableColumnIndex = new Dictionary<double, int> {
            { 0.995, 0 }, { 0.990, 1 }, { 0.975, 2 }, { 0.950, 3 }, { 0.900, 4 },
            { 0.100, 5 }, { 0.050, 6 }, { 0.025, 7 }, { 0.010, 8 }, { 0.005, 9 } };

        static internal double[,] tTable = new double[35, 5] {
            //       0.100  0.050  0.025   0.010    0.005
            /*1*/  { 3.078, 6.314, 12.706, 31.821, 63.657 },
            /*2*/  { 1.886, 2.920, 4.303,  6.965,  9.925  },
            /*3*/  { 1.638, 2.353, 3.182,  4.541,  5.841  },
            /*4*/  { 1.533, 2.132, 2.776,  3.747,  4.604  },
            /*5*/  { 1.476, 2.015, 2.571,  3.365,  4.032  },
            /*6*/  { 1.440, 1.943, 2.447,  3.143,  3.707  },
            /*7*/  { 1.415, 1.895, 2.365,  2.998,  3.499  },
            /*8*/  { 1.397, 1.860, 2.306,  2.896,  3.355  },
            /*9*/  { 1.383, 1.833, 2.262,  2.821,  3.250  },
            /*10*/ { 1.372, 1.812, 2.228,  2.764,  3.169  },
            /*11*/ { 1.363, 1.796, 2.201,  2.718,  3.106  },
            /*12*/ { 1.356, 1.782, 2.179,  2.681,  3.055  },
            /*13*/ { 1.350, 1.771, 2.160,  2.650,  3.012  },
            /*14*/ { 1.345, 1.761, 2.145,  2.624,  2.977  },
            /*15*/ { 1.341, 1.753, 2.131,  2.602,  2.947  },
            /*16*/ { 1.337, 1.746, 2.120,  2.583,  2.921  },
            /*17*/ { 1.333, 1.740, 2.110,  2.567,  2.898  },
            /*18*/ { 1.330, 1.734, 2.101,  2.552,  2.878  },
            /*19*/ { 1.328, 1.729, 2.093,  2.539,  2.861  },
            /*20*/ { 1.325, 1.725, 2.086,  2.528,  2.845  },
            /*21*/ { 1.323, 1.721, 2.080,  2.518,  2.831  },
            /*22*/ { 1.321, 1.717, 2.074,  2.508,  2.819  },
            /*23*/ { 1.319, 1.714, 2.069,  2.500,  2.807  },
            /*24*/ { 1.318, 1.711, 2.064,  2.492,  2.797  },
            /*25*/ { 1.316, 1.708, 2.060,  2.485,  2.787  },
            /*26*/ { 1.315, 1.706, 2.056,  2.479,  2.779  },
            /*27*/ { 1.314, 1.703, 2.052,  2.473,  2.771  },
            /*28*/ { 1.313, 1.701, 2.048,  2.467,  2.763  },
            /*29*/ { 1.311, 1.699, 2.045,  2.462,  2.756  },
            /*30*/ { 1.310, 1.697, 2.042,  2.457,  2.750  },
            /*32*/ { 1.309, 1.694, 2.037,  2.449,  2.738  },
            /*34*/ { 1.307, 1.691, 2.032,  2.441,  2.728  },
            /*36*/ { 1.306, 1.688, 2.028,  2.434,  2.719  },
            /*38*/ { 1.304, 1.686, 2.024,  2.429,  2.712  },
            /*∞*/  { 1.282, 1.645, 1.960,  2.326,  2.576  } };

        static private Dictionary<string, int> tTableRowIndex = new Dictionary<string, int> {
            { "1", 0 }, { "2", 1 }, { "3", 2 }, { "4", 3 }, { "5", 4 },
            { "6", 5 }, { "7", 6 }, { "8", 7 }, { "9", 8 }, { "10", 9 },
            { "11", 10 }, { "12", 11 }, { "13", 12 }, { "14", 13 }, { "15", 14 },
            { "16", 15 }, { "17", 16 }, { "18", 17 }, { "19", 18 }, { "20", 19 },
            { "21", 20 }, { "22", 21 }, { "23", 22 }, { "24", 23 }, { "25", 24 },
            { "26", 25 }, { "27", 26 }, { "28", 27 }, { "29", 28 }, { "30", 29 },
            { "32", 30 }, { "34", 31 }, { "36", 32 }, { "38", 33 }, { "∞", 34 },
            //∞
            { "", 34 } };

        static private Dictionary<double, int> tTableColumnIndex = new Dictionary<double, int> { { 0.100, 0 }, { 0.050, 1 }, { 0.025, 2 }, { 0.010, 3 }, { 0.005, 4 } };

        static internal double[,] fTableAlphaPoint10 = new double[34, 19] {
            //df1 =   1        2        3        4        5        6        7        8        9        10       12       15       20       24       30       40       60       120      ∞
            //df2
            //||
            /*1*/   { 39.8634, 49.5000, 53.5932, 55.8329, 57.2400, 58.2044, 58.9059, 59.4389, 59.8575, 60.1949, 60.7052, 61.2203, 61.7402, 62.0020, 62.2649, 62.5290, 62.7942, 63.0606, 63.3281 },
            /*2*/   { 8.52632, 9.00000, 9.16179, 9.24342, 9.29263, 9.32553, 9.34908, 9.36677, 9.38054, 9.39157, 9.40813, 9.42471, 9.44131, 9.44962, 9.45793, 9.46624, 9.47456, 9.48289, 9.49122 },
            /*3*/   { 5.53832, 5.46238, 5.39077, 5.34264, 5.30916, 5.28473, 5.26619, 5.25167, 5.24000, 5.23041, 5.21562, 5.20031, 5.18448, 5.17636, 5.16811, 5.15972, 5.15119, 5.14251, 5.13370 },
            /*4*/   { 4.54477, 4.32456, 4.19086, 4.10725, 4.05058, 4.00975, 3.97897, 3.95494, 3.93567, 3.91988, 3.89553, 3.87036, 3.84434, 3.83099, 3.81742, 3.80361, 3.78957, 3.77527, 3.76073 },
            /*5*/   { 4.06042, 3.77972, 3.61948, 3.52020, 3.45298, 3.40451, 3.36790, 3.33928, 3.31628, 3.29740, 3.26824, 3.23801, 3.20665, 3.19052, 3.17408, 3.15732, 3.14023, 3.12279, 3.10500 },
            /*6*/   { 3.77595, 3.46330, 3.28876, 3.18076, 3.10751, 3.05455, 3.01446, 2.98304, 2.95774, 2.93693, 2.90472, 2.87122, 2.83634, 2.81834, 2.79996, 2.78117, 2.76195, 2.74229, 2.72216 },
            /*7*/   { 3.58943, 3.25744, 3.07407, 2.96053, 2.88334, 2.82739, 2.78493, 2.75158, 2.72468, 2.70251, 2.66811, 2.63223, 2.59473, 2.57533, 2.55546, 2.53510, 2.51422, 2.49279, 2.47079 },
            /*8*/   { 3.45792, 3.11312, 2.92380, 2.80643, 2.72645, 2.66833, 2.62413, 2.58935, 2.56124, 2.53804, 2.50196, 2.46422, 2.42464, 2.40410, 2.38302, 2.36136, 2.33910, 2.31618, 2.29257 },
            /*9*/   { 3.36030, 3.00645, 2.81286, 2.69268, 2.61061, 2.55086, 2.50531, 2.46941, 2.44034, 2.41632, 2.37888, 2.33962, 2.29832, 2.27683, 2.25472, 2.23196, 2.20849, 2.18427, 2.15923 },
            /*10*/  { 3.28502, 2.92447, 2.72767, 2.60534, 2.52164, 2.46058, 2.41397, 2.37715, 2.34731, 2.32260, 2.28405, 2.24351, 2.20074, 2.17843, 2.15543, 2.13169, 2.10716, 2.08176, 2.05542 },
            /*11*/  { 3.22520, 2.85951, 2.66023, 2.53619, 2.45118, 2.38907, 2.34157, 2.30400, 2.27350, 2.24823, 2.20873, 2.16709, 2.12305, 2.10001, 2.07621, 2.05161, 2.02612, 1.99965, 1.97211 },
            /*12*/  { 3.17655, 2.80680, 2.60552, 2.48010, 2.39402, 2.33102, 2.28278, 2.24457, 2.21352, 2.18776, 2.14744, 2.10485, 2.05968, 2.03599, 2.01149, 1.98610, 1.95973, 1.93228, 1.90361 },
            /*13*/  { 3.13621, 2.76317, 2.56027, 2.43371, 2.34672, 2.28298, 2.23410, 2.19535, 2.16382, 2.13763, 2.09659, 2.05316, 2.00698, 1.98272, 1.95757, 1.93147, 1.90429, 1.87591, 1.84620 },
            /*14*/  { 3.10221, 2.72647, 2.52222, 2.39469, 2.30694, 2.24256, 2.19313, 2.15390, 2.12195, 2.09540, 2.05371, 2.00953, 1.96245, 1.93766, 1.91193, 1.88516, 1.85723, 1.82800, 1.79728 },
            /*15*/  { 3.07319, 2.69517, 2.48979, 2.36143, 2.27302, 2.20808, 2.15818, 2.11853, 2.08621, 2.05932, 2.01707, 1.97222, 1.92431, 1.89904, 1.87277, 1.84539, 1.81676, 1.78672, 1.75505 },
            /*16*/  { 3.04811, 2.66817, 2.46181, 2.33274, 2.24376, 2.17833, 2.12800, 2.08798, 2.05533, 2.02815, 1.98539, 1.93992, 1.89127, 1.86556, 1.83879, 1.81084, 1.78156, 1.75075, 1.71817 },
            /*17*/  { 3.02623, 2.64464, 2.43743, 2.30775, 2.21825, 2.15239, 2.10169, 2.06134, 2.02839, 2.00094, 1.95772, 1.91169, 1.86236, 1.83624, 1.80901, 1.78053, 1.75063, 1.71909, 1.68564 },
            /*18*/  { 3.00698, 2.62395, 2.41601, 2.28577, 2.19583, 2.12958, 2.07854, 2.03789, 2.00467, 1.97698, 1.93334, 1.88681, 1.83685, 1.81035, 1.78269, 1.75371, 1.72322, 1.69099, 1.65671 },
            /*19*/  { 2.98990, 2.60561, 2.39702, 2.26630, 2.17596, 2.10936, 2.05802, 2.01710, 1.98364, 1.95573, 1.91170, 1.86471, 1.81416, 1.78731, 1.75924, 1.72979, 1.69876, 1.66587, 1.63077 },
            /*20*/  { 2.97465, 2.58925, 2.38009, 2.24893, 2.15823, 2.09132, 2.03970, 1.99853, 1.96485, 1.93674, 1.89236, 1.84494, 1.79384, 1.76667, 1.73822, 1.70833, 1.67678, 1.64326, 1.60738 },
            /*21*/  { 2.96096, 2.57457, 2.36489, 2.23334, 2.14231, 2.07512, 2.02325, 1.98186, 1.94797, 1.91967, 1.87497, 1.82715, 1.77555, 1.74807, 1.71927, 1.68896, 1.65691, 1.62278, 1.58615 },
            /*22*/  { 2.94858, 2.56131, 2.35117, 2.21927, 2.12794, 2.06050, 2.00840, 1.96680, 1.93273, 1.90425, 1.85925, 1.81106, 1.75899, 1.73122, 1.70208, 1.67138, 1.63885, 1.60415, 1.56678 },
            /*23*/  { 2.93736, 2.54929, 2.33873, 2.20651, 2.11491, 2.04723, 1.99492, 1.95312, 1.91888, 1.89025, 1.84497, 1.79643, 1.74392, 1.71588, 1.68643, 1.65535, 1.62237, 1.58711, 1.54903 },
            /*24*/  { 2.92712, 2.53833, 2.32739, 2.19488, 2.10303, 2.03513, 1.98263, 1.94066, 1.90625, 1.87748, 1.83194, 1.78308, 1.73015, 1.70185, 1.67210, 1.64067, 1.60726, 1.57146, 1.53270 },
            /*25*/  { 2.91774, 2.52831, 2.31702, 2.18424, 2.09216, 2.02406, 1.97138, 1.92925, 1.89469, 1.86578, 1.82000, 1.77083, 1.71752, 1.68898, 1.65895, 1.62718, 1.59335, 1.55703, 1.51760 },
            /*26*/  { 2.90913, 2.51910, 2.30749, 2.17447, 2.08218, 2.01389, 1.96104, 1.91876, 1.88407, 1.85503, 1.80902, 1.75957, 1.70589, 1.67712, 1.64682, 1.61472, 1.58050, 1.54368, 1.50360 },
            /*27*/  { 2.90119, 2.51061, 2.29871, 2.16546, 2.07298, 2.00452, 1.95151, 1.90909, 1.87427, 1.84511, 1.79889, 1.74917, 1.69514, 1.66616, 1.63560, 1.60320, 1.56859, 1.53129, 1.49057 },
            /*28*/  { 2.89385, 2.50276, 2.29060, 2.15714, 2.06447, 1.99585, 1.94270, 1.90014, 1.86520, 1.83593, 1.78951, 1.73954, 1.68519, 1.65600, 1.62519, 1.59250, 1.55753, 1.51976, 1.47841 },
            /*29*/  { 2.88703, 2.49548, 2.28307, 2.14941, 2.05658, 1.98781, 1.93452, 1.89184, 1.85679, 1.82741, 1.78081, 1.73060, 1.67593, 1.64655, 1.61551, 1.58253, 1.54721, 1.50899, 1.46704 },
            /*30*/  { 2.88069, 2.48872, 2.27607, 2.14223, 2.04925, 1.98033, 1.92692, 1.88412, 1.84896, 1.81949, 1.77270, 1.72227, 1.66731, 1.63774, 1.60648, 1.57323, 1.53757, 1.49891, 1.45636 },
            /*40*/  { 2.83535, 2.44037, 2.22609, 2.09095, 1.99682, 1.92688, 1.87252, 1.82886, 1.79290, 1.76269, 1.71456, 1.66241, 1.60515, 1.57411, 1.54108, 1.50562, 1.46716, 1.42476, 1.37691 },
            /*60*/  { 2.79107, 2.39325, 2.17741, 2.04099, 1.94571, 1.87472, 1.81939, 1.77483, 1.73802, 1.70701, 1.65743, 1.60337, 1.54349, 1.51072, 1.47554, 1.43734, 1.39520, 1.34757, 1.29146 },
            /*120*/ { 2.74781, 2.34734, 2.12999, 1.99230, 1.89587, 1.82381, 1.76748, 1.72196, 1.68425, 1.65238, 1.60120, 1.54500, 1.48207, 1.44723, 1.40938, 1.36760, 1.32034, 1.26457, 1.19256 },
            /*∞*/   { 2.70554, 2.30259, 2.08380, 1.94486, 1.84727, 1.77411, 1.71672, 1.67020, 1.63152, 1.59872, 1.54578, 1.48714, 1.42060, 1.38318, 1.34187, 1.29513, 1.23995, 1.16860, 1.00000 } };

        static internal double[,] fTableAlphaPoint05 = new double[34, 19] {
            //df1 =   1        2         3         4         5         6         7         8         9        10       12       15       20       24       30       40       60       120      ∞
            //df2
            //||
            /*1*/   { 161.447, 199.5000, 215.7073, 224.5832, 230.1619, 233.9860, 236.7684, 238.8827, 240.543, 241.881, 243.906, 245.949, 248.013, 249.051, 250.095, 251.143, 252.195, 253.252, 254.314 },
            /*2*/   { 18.5128, 19.0000,  19.1643,  19.2468,  19.2964,  19.3295,  19.3532,  19.3710,  19.3848, 19.3959, 19.4125, 19.4291, 19.4458, 19.4541, 19.4624, 19.4707, 19.4791, 19.4874, 19.4957 },
            /*3*/   { 10.1280, 9.5521,   9.2766,   9.1172,   9.0135,   8.9406,   8.8867,   8.8452,   8.8123,  8.7855,  8.7446,  8.7029,  8.6602,  8.6385,  8.6166,  8.5944,  8.5720,  8.5494,  8.5264  },
            /*4*/   { 7.7086,  6.9443,   6.5914,   6.3882,   6.2561,   6.1631,   6.0942,   6.0410,   5.9988,  5.9644,  5.9117,  5.8578,  5.8025,  5.7744,  5.7459,  5.7170,  5.6877,  5.6581,  5.6281  },
            /*5*/   { 6.6079,  5.7861,   5.4095,   5.1922,   5.0503,   4.9503,   4.8759,   4.8183,   4.7725,  4.7351,  4.6777,  4.6188,  4.5581,  4.5272,  4.4957,  4.4638,  4.4314,  4.3985,  4.3650  },
            /*6*/   { 5.9874,  5.1433,   4.7571,   4.5337,   4.3874,   4.2839,   4.2067,   4.1468,   4.0990,  4.0600,  3.9999,  3.9381,  3.8742,  3.8415,  3.8082,  3.7743,  3.7398,  3.7047,  3.6689  },
            /*7*/   { 5.5914,  4.7374,   4.3468,   4.1203,   3.9715,   3.8660,   3.7870,   3.7257,   3.6767,  3.6365,  3.5747,  3.5107,  3.4445,  3.4105,  3.3758,  3.3404,  3.3043,  3.2674,  3.2298  },
            /*8*/   { 5.3177,  4.4590,   4.0662,   3.8379,   3.6875,   3.5806,   3.5005,   3.4381,   3.3881,  3.3472,  3.2839,  3.2184,  3.1503,  3.1152,  3.0794,  3.0428,  3.0053,  2.9669,  2.9276  },
            /*9*/   { 5.1174,  4.2565,   3.8625,   3.6331,   3.4817,   3.3738,   3.2927,   3.2296,   3.1789,  3.1373,  3.0729,  3.0061,  2.9365,  2.9005,  2.8637,  2.8259,  2.7872,  2.7475,  2.7067  },
            /*10*/  { 4.9646,  4.1028,   3.7083,   3.4780,   3.3258,   3.2172,   3.1355,   3.0717,   3.0204,  2.9782,  2.9130,  2.8450,  2.7740,  2.7372,  2.6996,  2.6609,  2.6211,  2.5801,  2.5379  },
            /*11*/  { 4.8443,  3.9823,   3.5874,   3.3567,   3.2039,   3.0946,   3.0123,   2.9480,   2.8962,  2.8536,  2.7876,  2.7186,  2.6464,  2.6090,  2.5705,  2.5309,  2.4901,  2.4480,  2.4045  },
            /*12*/  { 4.7472,  3.8853,   3.4903,   3.2592,   3.1059,   2.9961,   2.9134,   2.8486,   2.7964,  2.7534,  2.6866,  2.6169,  2.5436,  2.5055,  2.4663,  2.4259,  2.3842,  2.3410,  2.2962  },
            /*13*/  { 4.6672,  3.8056,   3.4105,   3.1791,   3.0254,   2.9153,   2.8321,   2.7669,   2.7144,  2.6710,  2.6037,  2.5331,  2.4589,  2.4202,  2.3803,  2.3392,  2.2966,  2.2524,  2.2064  },
            /*14*/  { 4.6001,  3.7389,   3.3439,   3.1122,   2.9582,   2.8477,   2.7642,   2.6987,   2.6458,  2.6022,  2.5342,  2.4630,  2.3879,  2.3487,  2.3082,  2.2664,  2.2229,  2.1778,  2.1307  },
            /*15*/  { 4.5431,  3.6823,   3.2874,   3.0556,   2.9013,   2.7905,   2.7066,   2.6408,   2.5876,  2.5437,  2.4753,  2.4034,  2.3275,  2.2878,  2.2468,  2.2043,  2.1601,  2.1141,  2.0658  },
            /*16*/  { 4.4940,  3.6337,   3.2389,   3.0069,   2.8524,   2.7413,   2.6572,   2.5911,   2.5377,  2.4935,  2.4247,  2.3522,  2.2756,  2.2354,  2.1938,  2.1507,  2.1058,  2.0589,  2.0096  },
            /*17*/  { 4.4513,  3.5915,   3.1968,   2.9647,   2.8100,   2.6987,   2.6143,   2.5480,   2.4943,  2.4499,  2.3807,  2.3077,  2.2304,  2.1898,  2.1477,  2.1040,  2.0584,  2.0107,  1.9604  },
            /*18*/  { 4.4139,  3.5546,   3.1599,   2.9277,   2.7729,   2.6613,   2.5767,   2.5102,   2.4563,  2.4117,  2.3421,  2.2686,  2.1906,  2.1497,  2.1071,  2.0629,  2.0166,  1.9681,  1.9168  },
            /*19*/  { 4.3807,  3.5219,   3.1274,   2.8951,   2.7401,   2.6283,   2.5435,   2.4768,   2.4227,  2.3779,  2.3080,  2.2341,  2.1555,  2.1141,  2.0712,  2.0264,  1.9795,  1.9302,  1.8780  },
            /*20*/  { 4.3512,  3.4928,   3.0984,   2.8661,   2.7109,   2.5990,   2.5140,   2.4471,   2.3928,  2.3479,  2.2776,  2.2033,  2.1242,  2.0825,  2.0391,  1.9938,  1.9464,  1.8963,  1.8432  },
            /*21*/  { 4.3248,  3.4668,   3.0725,   2.8401,   2.6848,   2.5727,   2.4876,   2.4205,   2.3660,  2.3210,  2.2504,  2.1757,  2.0960,  2.0540,  2.0102,  1.9645,  1.9165,  1.8657,  1.8117  },
            /*22*/  { 4.3009,  3.4434,   3.0491,   2.8167,   2.6613,   2.5491,   2.4638,   2.3965,   2.3419,  2.2967,  2.2258,  2.1508,  2.0707,  2.0283,  1.9842,  1.9380,  1.8894,  1.8380,  1.7831  },
            /*23*/  { 4.2793,  3.4221,   3.0280,   2.7955,   2.6400,   2.5277,   2.4422,   2.3748,   2.3201,  2.2747,  2.2036,  2.1282,  2.0476,  2.0050,  1.9605,  1.9139,  1.8648,  1.8128,  1.7570  },
            /*24*/  { 4.2597,  3.4028,   3.0088,   2.7763,   2.6207,   2.5082,   2.4226,   2.3551,   2.3002,  2.2547,  2.1834,  2.1077,  2.0267,  1.9838,  1.9390,  1.8920,  1.8424,  1.7896,  1.7330  },
            /*25*/  { 4.2417,  3.3852,   2.9912,   2.7587,   2.6030,   2.4904,   2.4047,   2.3371,   2.2821,  2.2365,  2.1649,  2.0889,  2.0075,  1.9643,  1.9192,  1.8718,  1.8217,  1.7684,  1.7110  },
            /*26*/  { 4.2252,  3.3690,   2.9752,   2.7426,   2.5868,   2.4741,   2.3883,   2.3205,   2.2655,  2.2197,  2.1479,  2.0716,  1.9898,  1.9464,  1.9010,  1.8533,  1.8027,  1.7488,  1.6906  },
            /*27*/  { 4.2100,  3.3541,   2.9604,   2.7278,   2.5719,   2.4591,   2.3732,   2.3053,   2.2501,  2.2043,  2.1323,  2.0558,  1.9736,  1.9299,  1.8842,  1.8361,  1.7851,  1.7306,  1.6717  },
            /*28*/  { 4.1960,  3.3404,   2.9467,   2.7141,   2.5581,   2.4453,   2.3593,   2.2913,   2.2360,  2.1900,  2.1179,  2.0411,  1.9586,  1.9147,  1.8687,  1.8203,  1.7689,  1.7138,  1.6541  },
            /*29*/  { 4.1830,  3.3277,   2.9340,   2.7014,   2.5454,   2.4324,   2.3463,   2.2783,   2.2229,  2.1768,  2.1045,  2.0275,  1.9446,  1.9005,  1.8543,  1.8055,  1.7537,  1.6981,  1.6376  },
            /*30*/  { 4.1709,  3.3158,   2.9223,   2.6896,   2.5336,   2.4205,   2.3343,   2.2662,   2.2107,  2.1646,  2.0921,  2.0148,  1.9317,  1.8874,  1.8409,  1.7918,  1.7396,  1.6835,  1.6223  },
            /*40*/  { 4.0847,  3.2317,   2.8387,   2.6060,   2.4495,   2.3359,   2.2490,   2.1802,   2.1240,  2.0772,  2.0035,  1.9245,  1.8389,  1.7929,  1.7444,  1.6928,  1.6373,  1.5766,  1.5089  },
            /*60*/  { 4.0012,  3.1504,   2.7581,   2.5252,   2.3683,   2.2541,   2.1665,   2.0970,   2.0401,  1.9926,  1.9174,  1.8364,  1.7480,  1.7001,  1.6491,  1.5943,  1.5343,  1.4673,  1.3893  },
            /*120*/ { 3.9201,  3.0718,   2.6802,   2.4472,   2.2899,   2.1750,   2.0868,   2.0164,   1.9588,  1.9105,  1.8337,  1.7505,  1.6587,  1.6084,  1.5543,  1.4952,  1.4290,  1.3519,  1.2539  },
            /*∞*/   { 3.8415,  2.9957,   2.6049,   2.3719,   2.2141,   2.0986,   2.0096,   1.9384,   1.8799,  1.8307,  1.7522,  1.6664,  1.5705,  1.5173,  1.4591,  1.3940,  1.3180,  1.2214,  1.0000  } };

        static internal double[,] fTableAlphaPoint025 = new double[34, 19] {
            //df1 =   1         2         3         4         5         6         7         8        9        10       12       15       20       24       30       40       60       120      ∞
            //df2
            //||
            /*1*/   { 647.7890, 799.5000, 864.1630, 899.5833, 921.8479, 937.1111, 948.2169, 956.656, 963.284, 968.627, 976.707, 984.866, 993.102, 997.249, 1001.41, 1005.59, 1009.80, 1014.02, 1018.25 },
            /*2*/   { 38.5063,  39.0000,  39.1655,  39.2484,  39.2982,  39.3315,  39.3552,  39.3730, 39.3869, 39.3980, 39.4146, 39.4313, 39.4479, 39.4562, 39.465,  39.473,  39.481,  39.490,  39.498  },
            /*3*/   { 17.4434,  16.0441,  15.4392,  15.1010,  14.8848,  14.7347,  14.6244,  14.5399, 14.4731, 14.4189, 14.3366, 14.2527, 14.1674, 14.1241, 14.081,  14.037,  13.992,  13.947,  13.902  },
            /*4*/   { 12.2179,  10.6491,  9.9792,  9.6045,    9.3645,   9.1973,   9.0741,   8.9796,  8.9047,  8.8439,  8.7512,  8.6565,  8.5599,  8.5109,  8.461,   8.411,   8.360,   8.309,   8.257   },
            /*5*/   { 10.0070,  8.4336,   7.7636,  7.3879,    7.1464,   6.9777,   6.8531,   6.7572,  6.6811,  6.6192,  6.5245,  6.4277,  6.3286,  6.2780,  6.227,   6.175,   6.123,   6.069,   6.015   },
            /*6*/   { 8.8131,   7.2599,   6.5988,  6.2272,    5.9876,   5.8198,   5.6955,   5.5996,  5.5234,  5.4613,  5.3662,  5.2687,  5.1684,  5.1172,  5.065,   5.012,   4.959,   4.904,   4.849   },
            /*7*/   { 8.0727,   6.5415,   5.8898,  5.5226,    5.2852,   5.1186,   4.9949,   4.8993,  4.8232,  4.7611,  4.6658,  4.5678,  4.4667,  4.4150,  4.362,   4.309,   4.254,   4.199,   4.142   },
            /*8*/   { 7.5709,   6.0595,   5.4160,  5.0526,    4.8173,   4.6517,   4.5286,   4.4333,  4.3572,  4.2951,  4.1997,  4.1012,  3.9995,  3.9472,  3.894,   3.840,   3.784,   3.728,   3.670   },
            /*9*/   { 7.2093,   5.7147,   5.0781,  4.7181,    4.4844,   4.3197,   4.1970,   4.1020,  4.0260,  3.9639,  3.8682,  3.7694,  3.6669,  3.6142,  3.560,   3.505,   3.449,   3.392,   3.333   },
            /*10*/  { 6.9367,   5.4564,   4.8256,  4.4683,    4.2361,   4.0721,   3.9498,   3.8549,  3.7790,  3.7168,  3.6209,  3.5217,  3.4185,  3.3654,  3.311,   3.255,   3.198,   3.140,   3.080   },
            /*11*/  { 6.7241,   5.2559,   4.6300,  4.2751,    4.0440,   3.8807,   3.7586,   3.6638,  3.5879,  3.5257,  3.4296,  3.3299,  3.2261,  3.1725,  3.118,   3.061,   3.004,   2.944,   2.883   },
            /*12*/  { 6.5538,   5.0959,   4.4742,  4.1212,    3.8911,   3.7283,   3.6065,   3.5118,  3.4358,  3.3736,  3.2773,  3.1772,  3.0728,  3.0187,  2.963,   2.906,   2.848,   2.787,   2.725   },
            /*13*/  { 6.4143,   4.9653,   4.3472,  3.9959,    3.7667,   3.6043,   3.4827,   3.3880,  3.3120,  3.2497,  3.1532,  3.0527,  2.9477,  2.8932,  2.837,   2.780,   2.720,   2.659,   2.595   },
            /*14*/  { 6.2979,   4.8567,   4.2417,  3.8919,    3.6634,   3.5014,   3.3799,   3.2853,  3.2093,  3.1469,  3.0502,  2.9493,  2.8437,  2.7888,  2.732,   2.674,   2.614,   2.552,   2.487   },
            /*15*/  { 6.1995,   4.7650,   4.1528,  3.8043,    3.5764,   3.4147,   3.2934,   3.1987,  3.1227,  3.0602,  2.9633,  2.8621,  2.7559,  2.7006,  2.644,   2.585,   2.524,   2.461,   2.395   },
            /*16*/  { 6.1151,   4.6867,   4.0768,  3.7294,    3.5021,   3.3406,   3.2194,   3.1248,  3.0488,  2.9862,  2.8890,  2.7875,  2.6808,  2.6252,  2.568,   2.509,   2.447,   2.383,   2.316   },
            /*17*/  { 6.0420,   4.6189,   4.0112,  3.6648,    3.4379,   3.2767,   3.1556,   3.0610,  2.9849,  2.9222,  2.8249,  2.7230,  2.6158,  2.5598,  2.502,   2.442,   2.380,   2.315,   2.247   },
            /*18*/  { 5.9781,   4.5597,   3.9539,  3.6083,    3.3820,   3.2209,   3.0999,   3.0053,  2.9291,  2.8664,  2.7689,  2.6667,  2.5590,  2.5027,  2.445,   2.384,   2.321,   2.256,   2.187   },
            /*19*/  { 5.9216,   4.5075,   3.9034,  3.5587,    3.3327,   3.1718,   3.0509,   2.9563,  2.8801,  2.8172,  2.7196,  2.6171,  2.5089,  2.4523,  2.394,   2.333,   2.270,   2.203,   2.133   },
            /*20*/  { 5.8715,   4.4613,   3.8587,  3.5147,    3.2891,   3.1283,   3.0074,   2.9128,  2.8365,  2.7737,  2.6758,  2.5731,  2.4645,  2.4076,  2.349,   2.287,   2.223,   2.156,   2.085   },
            /*21*/  { 5.8266,   4.4199,   3.8188,  3.4754,    3.2501,   3.0895,   2.9686,   2.8740,  2.7977,  2.7348,  2.6368,  2.5338,  2.4247,  2.3675,  2.308,   2.246,   2.182,   2.114,   2.042   },
            /*22*/  { 5.7863,   4.3828,   3.7829,  3.4401,    3.2151,   3.0546,   2.9338,   2.8392,  2.7628,  2.6998,  2.6017,  2.4984,  2.3890,  2.3315,  2.272,   2.210,   2.145,   2.076,   2.003   },
            /*23*/  { 5.7498,   4.3492,   3.7505,  3.4083,    3.1835,   3.0232,   2.9023,   2.8077,  2.7313,  2.6682,  2.5699,  2.4665,  2.3567,  2.2989,  2.239,   2.176,   2.111,   2.041,   1.968   },
            /*24*/  { 5.7166,   4.3187,   3.7211,  3.3794,    3.1548,   2.9946,   2.8738,   2.7791,  2.7027,  2.6396,  2.5411,  2.4374,  2.3273,  2.2693,  2.209,   2.146,   2.080,   2.010,   1.935   },
            /*25*/  { 5.6864,   4.2909,   3.6943,  3.3530,    3.1287,   2.9685,   2.8478,   2.7531,  2.6766,  2.6135,  2.5149,  2.4110,  2.3005,  2.2422,  2.182,   2.118,   2.052,   1.981,   1.906   },
            /*26*/  { 5.6586,   4.2655,   3.6697,  3.3289,    3.1048,   2.9447,   2.8240,   2.7293,  2.6528,  2.5896,  2.4908,  2.3867,  2.2759,  2.2174,  2.157,   2.093,   2.026,   1.954,   1.878   },
            /*27*/  { 5.6331,   4.2421,   3.6472,  3.3067,    3.0828,   2.9228,   2.8021,   2.7074,  2.6309,  2.5676,  2.4688,  2.3644,  2.2533,  2.1946,  2.133,   2.069,   2.002,   1.930,   1.853   },
            /*28*/  { 5.6096,   4.2205,   3.6264,  3.2863,    3.0626,   2.9027,   2.7820,   2.6872,  2.6106,  2.5473,  2.4484,  2.3438,  2.2324,  2.1735,  2.112,   2.048,   1.980,   1.907,   1.829   },
            /*29*/  { 5.5878,   4.2006,   3.6072,  3.2674,    3.0438,   2.8840,   2.7633,   2.6686,  2.5919,  2.5286,  2.4295,  2.3248,  2.2131,  2.1540,  2.092,   2.028,   1.959,   1.886,   1.807   },
            /*30*/  { 5.5675,   4.1821,   3.5894,  3.2499,    3.0265,   2.8667,   2.7460,   2.6513,  2.5746,  2.5112,  2.4120,  2.3072,  2.1952,  2.1359,  2.074,   2.009,   1.940,   1.866,   1.787   },
            /*40*/  { 5.4239,   4.0510,   3.4633,  3.1261,    2.9037,   2.7444,   2.6238,   2.5289,  2.4519,  2.3882,  2.2882,  2.1819,  2.0677,  2.0069,  1.943,   1.875,   1.803,   1.724,   1.637   },
            /*60*/  { 5.2856,   3.9253,   3.3425,  3.0077,    2.7863,   2.6274,   2.5068,   2.4117,  2.3344,  2.2702,  2.1692,  2.0613,  1.9445,  1.8817,  1.815,   1.744,   1.667,   1.581,   1.482   },
            /*120*/ { 5.1523,   3.8046,   3.2269,  2.8943,    2.6740,   2.5154,   2.3948,   2.2994,  2.2217,  2.1570,  2.0548,  1.9450,  1.8249,  1.7597,  1.690,   1.614,   1.530,   1.433,   1.310   },
            /*∞*/   { 5.0239,   3.6889,   3.1161,  2.7858,    2.5665,   2.4082,   2.2875,   2.1918,  2.1136,  2.0483,  1.9447,  1.8326,  1.7085,  1.6402,  1.566,   1.484,   1.388,   1.268,   1.000   } };

        static internal double[,] fTableAlphaPoint01 = new double[34, 19] {
            //df1 =   1         2         3         4         5         6         7         8        9        10       12       15       20       24       30       40       60       120      ∞
            //df2
            //||
            /*1*/   { 4052.181, 4999.500, 5403.352, 5624.583, 5763.650, 5858.986, 5928.356, 5981.07, 6022.47, 6055.84, 6106.32, 6157.28, 6208.73, 6234.63, 6260.64, 6286.78, 6313.03, 6339.39, 6365.86 },
            /*2*/   { 98.503,   99.000,   99.166,   99.249,   99.299,   99.333,   99.356,   99.374,  99.388,  99.399,  99.416,  99.433,  99.449,  99.458,  99.466,  99.474,  99.482,  99.491,  99.499  },
            /*3*/   { 34.116,   30.817,   29.457,   28.710,   28.237,   27.911,   27.672,   27.489,  27.345,  27.229,  27.052,  26.872,  26.690,  26.598,  26.505,  26.411,  26.316,  26.221,  26.125  },
            /*4*/   { 21.198,   18.000,   16.694,   15.977,   15.522,   15.207,   14.976,   14.799,  14.659,  14.546,  14.374,  14.198,  14.020,  13.929,  13.838,  13.745,  13.652,  13.558,  13.463  },
            /*5*/   { 16.258,   13.274,   12.060,   11.392,   10.967,   10.672,   10.456,   10.289,  10.158,  10.051,  9.888,   9.722,   9.553,   9.466,   9.379,   9.291,   9.202,   9.112,   9.020   },
            /*6*/   { 13.745,   10.925,   9.780,    9.148,    8.746,    8.466,    8.260,    8.102,   7.976,   7.874,   7.718,   7.559,   7.396,   7.313,   7.229,   7.143,   7.057,   6.969,   6.880   },
            /*7*/   { 12.246,   9.547,    8.451,    7.847,    7.460,    7.191,    6.993,    6.840,   6.719,   6.620,   6.469,   6.314,   6.155,   6.074,   5.992,   5.908,   5.824,   5.737,   5.650   },
            /*8*/   { 11.259,   8.649,    7.591,    7.006,    6.632,    6.371,    6.178,    6.029,   5.911,   5.814,   5.667,   5.515,   5.359,   5.279,   5.198,   5.116,   5.032,   4.946,   4.859   },
            /*9*/   { 10.561,   8.022,    6.992,    6.422,    6.057,    5.802,    5.613,    5.467,   5.351,   5.257,   5.111,   4.962,   4.808,   4.729,   4.649,   4.567,   4.483,   4.398,   4.311   },
            /*10*/  { 10.044,   7.559,    6.552,    5.994,    5.636,    5.386,    5.200,    5.057,   4.942,   4.849,   4.706,   4.558,   4.405,   4.327,   4.247,   4.165,   4.082,   3.996,   3.909   },
            /*11*/  { 9.646,    7.206,    6.217,    5.668,    5.316,    5.069,    4.886,    4.744,   4.632,   4.539,   4.397,   4.251,   4.099,   4.021,   3.941,   3.860,   3.776,   3.690,   3.602   },
            /*12*/  { 9.330,    6.927,    5.953,    5.412,    5.064,    4.821,    4.640,    4.499,   4.388,   4.296,   4.155,   4.010,   3.858,   3.780,   3.701,   3.619,   3.535,   3.449,   3.361   },
            /*13*/  { 9.074,    6.701,    5.739,    5.205,    4.862,    4.620,    4.441,    4.302,   4.191,   4.100,   3.960,   3.815,   3.665,   3.587,   3.507,   3.425,   3.341,   3.255,   3.165   },
            /*14*/  { 8.862,    6.515,    5.564,    5.035,    4.695,    4.456,    4.278,    4.140,   4.030,   3.939,   3.800,   3.656,   3.505,   3.427,   3.348,   3.266,   3.181,   3.094,   3.004   },
            /*15*/  { 8.683,    6.359,    5.417,    4.893,    4.556,    4.318,    4.142,    4.004,   3.895,   3.805,   3.666,   3.522,   3.372,   3.294,   3.214,   3.132,   3.047,   2.959,   2.868   },
            /*16*/  { 8.531,    6.226,    5.292,    4.773,    4.437,    4.202,    4.026,    3.890,   3.780,   3.691,   3.553,   3.409,   3.259,   3.181,   3.101,   3.018,   2.933,   2.845,   2.753   },
            /*17*/  { 8.400,    6.112,    5.185,    4.669,    4.336,    4.102,    3.927,    3.791,   3.682,   3.593,   3.455,   3.312,   3.162,   3.084,   3.003,   2.920,   2.835,   2.746,   2.653   },
            /*18*/  { 8.285,    6.013,    5.092,    4.579,    4.248,    4.015,    3.841,    3.705,   3.597,   3.508,   3.371,   3.227,   3.077,   2.999,   2.919,   2.835,   2.749,   2.660,   2.566   },
            /*19*/  { 8.185,    5.926,    5.010,    4.500,    4.171,    3.939,    3.765,    3.631,   3.523,   3.434,   3.297,   3.153,   3.003,   2.925,   2.844,   2.761,   2.674,   2.584,   2.489   },
            /*20*/  { 8.096,    5.849,    4.938,    4.431,    4.103,    3.871,    3.699,    3.564,   3.457,   3.368,   3.231,   3.088,   2.938,   2.859,   2.778,   2.695,   2.608,   2.517,   2.421   },
            /*21*/  { 8.017,    5.780,    4.874,    4.369,    4.042,    3.812,    3.640,    3.506,   3.398,   3.310,   3.173,   3.030,   2.880,   2.801,   2.720,   2.636,   2.548,   2.457,   2.360   },
            /*22*/  { 7.945,    5.719,    4.817,    4.313,    3.988,    3.758,    3.587,    3.453,   3.346,   3.258,   3.121,   2.978,   2.827,   2.749,   2.667,   2.583,   2.495,   2.403,   2.305   },
            /*23*/  { 7.881,    5.664,    4.765,    4.264,    3.939,    3.710,    3.539,    3.406,   3.299,   3.211,   3.074,   2.931,   2.781,   2.702,   2.620,   2.535,   2.447,   2.354,   2.256   },
            /*24*/  { 7.823,    5.614,    4.718,    4.218,    3.895,    3.667,    3.496,    3.363,   3.256,   3.168,   3.032,   2.889,   2.738,   2.659,   2.577,   2.492,   2.403,   2.310,   2.211   },
            /*25*/  { 7.770,    5.568,    4.675,    4.177,    3.855,    3.627,    3.457,    3.324,   3.217,   3.129,   2.993,   2.850,   2.699,   2.620,   2.538,   2.453,   2.364,   2.270,   2.169   },
            /*26*/  { 7.721,    5.526,    4.637,    4.140,    3.818,    3.591,    3.421,    3.288,   3.182,   3.094,   2.958,   2.815,   2.664,   2.585,   2.503,   2.417,   2.327,   2.233,   2.131   },
            /*27*/  { 7.677,    5.488,    4.601,    4.106,    3.785,    3.558,    3.388,    3.256,   3.149,   3.062,   2.926,   2.783,   2.632,   2.552,   2.470,   2.384,   2.294,   2.198,   2.097   },
            /*28*/  { 7.636,    5.453,    4.568,    4.074,    3.754,    3.528,    3.358,    3.226,   3.120,   3.032,   2.896,   2.753,   2.602,   2.522,   2.440,   2.354,   2.263,   2.167,   2.064   },
            /*29*/  { 7.598,    5.420,    4.538,    4.045,    3.725,    3.499,    3.330,    3.198,   3.092,   3.005,   2.868,   2.726,   2.574,   2.495,   2.412,   2.325,   2.234,   2.138,   2.034   },
            /*30*/  { 7.562,    5.390,    4.510,    4.018,    3.699,    3.473,    3.304,    3.173,   3.067,   2.979,   2.843,   2.700,   2.549,   2.469,   2.386,   2.299,   2.208,   2.111,   2.006   },
            /*40*/  { 7.314,    5.179,    4.313,    3.828,    3.514,    3.291,    3.124,    2.993,   2.888,   2.801,   2.665,   2.522,   2.369,   2.288,   2.203,   2.114,   2.019,   1.917,   1.805   },
            /*60*/  { 7.077,    4.977,    4.126,    3.649,    3.339,    3.119,    2.953,    2.823,   2.718,   2.632,   2.496,   2.352,   2.198,   2.115,   2.028,   1.936,   1.836,   1.726,   1.601   },
            /*120*/ { 6.851,    4.787,    3.949,    3.480,    3.174,    2.956,    2.792,    2.663,   2.559,   2.472,   2.336,   2.192,   2.035,   1.950,   1.860,   1.763,   1.656,   1.533,   1.381   },
            /*∞*/   { 6.635,    4.605,    3.782,    3.319,    3.017,    2.802,    2.639,    2.511,   2.407,   2.321,   2.185,   2.039,   1.878,   1.791,   1.696,   1.592,   1.473,   1.325,   1.000   } };

        static private Dictionary<string, int> fTablesRowIndex = new Dictionary<string, int> {
            { "1", 0 }, { "2", 1 }, { "3", 2 }, { "4", 3 }, { "5", 4 },
            { "6", 5 }, { "7", 6 }, { "8", 7 }, { "9", 8 }, { "10", 9 },
            { "11", 10 }, { "12", 11 }, { "13", 12 }, { "14", 13 }, { "15", 14 },
            { "16", 15 }, { "17", 16 }, { "18", 17 }, { "19", 18 }, { "20", 19 },
            { "21", 20 }, { "22", 21 }, { "23", 22 }, { "24", 23 }, { "25", 24 },
            { "26", 25 }, { "27", 26 }, { "28", 27 }, { "29", 28 }, { "30", 29 },
            { "40", 30 }, { "60", 31 }, { "120", 32 }, { "∞", 33 },
            //∞
            { "", 33 } };

        static private Dictionary<string, int> fTablesColumnIndex = new Dictionary<string, int> {
            { "1", 0 }, { "2", 1 }, { "3", 2 }, { "4", 3 }, { "5", 4 },
            { "6", 5 }, { "7", 6 }, { "8", 7 }, { "9", 8 }, { "10", 9 },
            { "12", 10 }, { "15", 11 }, { "20", 12 }, { "24", 13 }, { "30", 14 },
            { "40", 15 }, { "60", 16 }, { "120", 17 }, { "∞", 18 },
            //∞
            { "", 18 } };

        #endregion Tables and Indexes

        #region Usage

        static internal double GetZTableProbability(string firstPart, string secondPart)
        { return zTable[zTableRowIndex[firstPart], Convert.ToInt32(secondPart)]; }

        static internal double GetZTableZPoint(double probabilityValue)
        {
            List<string> keys = new List<string>(zTableRowIndex.Keys);
            List<int> values = new List<int>(zTableRowIndex.Values);
            double currProb;
            double bestProb = Int32.MaxValue;
            string iString = "";
            string jString = "";
            for (int i = 0; i < zTable.GetLength(0); i++)
                for (int j = 0; j < zTable.GetLength(1); j++)
                {
                    currProb = zTable[i, j];
                    if (Math.Abs(probabilityValue - bestProb) >= Math.Abs(probabilityValue - currProb))
                    {
                        bestProb = currProb;
                        for (int k = 0; k < keys.Count; k++)
                            if (zTable[values[k], j] == bestProb)
                                iString = keys[k];
                        jString = j.ToString();
                    }
                }
            return Convert.ToDouble(iString + jString);
        }

        static internal double GetChiSquareTableValue(int degreesOfFreedom, double alpha)
        { return chiSquareTable[chiSquareTableRowIndex[degreesOfFreedom], chiSquareTableColumnIndex[alpha]]; }

        static internal double GetTTableValue(string degreesOfFreedom, double alpha)
        { return tTable[tTableRowIndex[degreesOfFreedom], tTableColumnIndex[alpha]]; }

        static internal double GetFTableValue(string degreesOfFreedomMSb, string degreesOfFreedomMSw, double alpha)
        {
            double[,] fTable;
            if (alpha == .10)
                fTable = fTableAlphaPoint10;
            else if (alpha == .05)
                fTable = fTableAlphaPoint05;
            else if (alpha == .025)
                fTable = fTableAlphaPoint025;
            else if (alpha == .01)
                fTable = fTableAlphaPoint01;
            else
                return 0;
            return fTable[fTablesRowIndex[degreesOfFreedomMSw], fTablesColumnIndex[degreesOfFreedomMSb]];
        }

        #endregion Usage

        #endregion Tables

        #region Utilities

        static public BindingList<T> RemoveDuplicates<T>(BindingList<T> collection)
        {
            BindingList<T> list = new BindingList<T>();
            foreach (T item in collection)
                if (!list.Contains(item))
                    list.Add(item);
            return list;
        }

        static internal List<T> RemoveDuplicates<T>(List<T> collection)
        {
            List<T> list = new List<T>();
            foreach (T item in collection)
                if (!list.Contains(item))
                    list.Add(item);
            return list;
        }

        static internal int GetFrequency(List<string> collection, string item)
        {
            int counter = 0;
            foreach (string obj in collection)
                if (obj == item)
                    counter++;
            return counter;
        }

        static internal int GetFrequency(List<double> collection, double item)
        {
            List<string> list = new List<string>();
            foreach (double obj in collection)
                list.Add(obj.ToString());
            return GetFrequency(list, item.ToString());
        }

        static internal double Sum(List<double> collection)
        {
            double sum = 0;
            foreach (double item in collection)
                sum += item;
            return sum;
        }

        static internal int GetFrequency(BindingList<ClassSet<string>> sets, ClassSet<string> container)
        {
            int counter = 0;
            List<int> countedElementsIndeces = new List<int>();
            for (int i = 0; i < container.Cardinality; i++)
                foreach (ClassSet<string> interestingSet in sets)
                    foreach (string elementInTheSet in interestingSet.Elements)
                        if (elementInTheSet == container.Elements[i])
                        {
                            if (!countedElementsIndeces.Contains(i))
                                countedElementsIndeces.Add(i);
                            bool counted = false;
                            foreach (int index in countedElementsIndeces)
                                if (container.Elements[i] == container.Elements[index] && i != index)
                                    counted = true;
                            if (!counted)
                                counter++;
                        }
            return counter;
        }

        #endregion Utilities

        #region Set Theory

        static internal bool Inclusion(ClassSet<string> set1, ClassSet<string> set2, bool strict)
        {
            if (set1.Cardinality > set2.Cardinality)
                return false;

            if (strict)
                if (set1 == set2)
                    return false;

            for (int i = 0; i < set1.Cardinality; i++)
                if (!set2.Elements.Contains(set1.Elements[i]))
                    return false;
            return true;
        }

        static internal BindingList<string> PowerSet(ClassSet<string> set)
        {
            int n = set.Cardinality;
            // Power set contains 2^N subsets.
            long powerSetCount = Convert.ToInt64(Math.Pow(2, n));
            BindingList<string> powerSet = new BindingList<string>();

            for (int setMask = 0; setMask < powerSetCount; setMask++)
            {
                string s = "{";
                for (int i = 0; i < n; i++)
                {
                    // Checking whether i'th element of input collection should go to the current subset.
                    if ((setMask & (1 << i)) > 0)
                        s += set.Elements[i] + ",";
                }
                //remove last inserted comma
                try
                { s = s.Remove(s.LastIndexOf(','), 1); }
                catch { }
                s += "}";
                powerSet.Add(s.ToString());
            }
            return powerSet;
        }

        static internal BindingList<ClassSet<T>> PowerSet<T>(ClassSet<T> set)
        {
            int n = set.Cardinality;
            // Power set contains 2^N subsets.
            long powerSetCount = Convert.ToInt64(Math.Pow(2, n));
            BindingList<ClassSet<T>> powerSet = new BindingList<ClassSet<T>>();

            for (int setMask = 0; setMask < powerSetCount; setMask++)
            {
                ClassSet<T> s = new ClassSet<T>('X');
                for (int i = 0; i < n; i++)
                {
                    // Checking whether i'th element of input collection should go to the current subset.
                    if ((setMask & (1 << i)) > 0)
                        s.Elements.Add(set.Elements[i]);
                }
                powerSet.Add(s);
            }
            return powerSet;
        }

        static internal BindingList<string> Union(ClassSet<string> set1, ClassSet<string> set2)
        {
            BindingList<string> tempElements = new BindingList<string>();
            foreach (string item in set1.Elements)
                tempElements.Add(item);
            foreach (string item in set2.Elements)
                tempElements.Add(item);
            if (!set1.Ordered)
                tempElements = ClassSpotoMasterRace.RemoveDuplicates(tempElements);
            return tempElements;
        }

        static internal BindingList<string> Intersection(ClassSet<string> set1, ClassSet<string> set2)
        {
            BindingList<string> tempElements = new BindingList<string>();
            foreach (string item1 in set1.Elements)
                foreach (string item2 in set2.Elements)
                    if (item1 == item2)
                        tempElements.Add(item1);
            if (!set1.Ordered)
                tempElements = ClassSpotoMasterRace.RemoveDuplicates(tempElements);
            return tempElements;
        }

        static internal BindingList<string> Difference(ClassSet<string> set1, ClassSet<string> set2)
        {
            ClassSet<string> intersection = new ClassSet<string>('A', Intersection(set1, set2), set1.Ordered);
            BindingList<string> tempElements = new BindingList<string>();
            foreach (string item in set1.Elements)
                tempElements.Add(item);
            foreach (string item in intersection.Elements)
                while (tempElements.IndexOf(item) >= 0)
                    tempElements.Remove(item);
            if (!set1.Ordered)
                tempElements = ClassSpotoMasterRace.RemoveDuplicates(tempElements);
            return tempElements;
        }

        static internal BindingList<string> CartesianProduct(ClassSet<string> set1, ClassSet<string> set2)
        {
            BindingList<string> tempElements = new BindingList<string>();
            foreach (string item1 in set1.Elements)
                foreach (string item2 in set2.Elements)
                    tempElements.Add("(" + item1 + "," + item2 + ")");
            if (!set1.Ordered)
                tempElements = ClassSpotoMasterRace.RemoveDuplicates(tempElements);
            return tempElements;
        }

        #endregion Set Theory

        #region Descriptive Statistics

        #region Significant Statistics for Nominal Scales

        static internal List<string> Mode(List<string> collection)
        {
            List<string> list = new List<string>(collection);

            List<string> mode = new List<string>();
            int modeFrequency = 0;
            int itemFrequency = 0;
            //find the higher frequency
            foreach (string item in list)
            {
                itemFrequency = GetFrequency(list, item);
                if (itemFrequency > modeFrequency)
                    modeFrequency = itemFrequency;
            }
            //find the mode
            foreach (string item in list)
            {
                itemFrequency = GetFrequency(list, item);
                if (itemFrequency == modeFrequency)
                    if (!mode.Contains(item))
                        mode.Add(item);
            }
            return mode;
        }

        static internal int NumberOfEquivalentClasses<T>(List<T> collection)
        { return RemoveDuplicates(collection).Count; }

        #endregion Significant Statistics for Nominal Scales

        #region Significant Statistics for Ordinal Scales

        static internal Dictionary<double, double> Proportions(List<double> collection)
        {
            List<double> list = new List<double>(collection);
            list = RemoveDuplicates(list);
            list.Sort();
            Dictionary<double, double> keyvalue = new Dictionary<double, double>(list.Count);
            for (int i = 0; i < list.Count; i++)
                keyvalue[list[i]] = GetFrequency(collection, list[i]);
            int dim = keyvalue.Count;
            Dictionary<double, double> proportions = new Dictionary<double, double>();
            foreach (KeyValuePair<double, double> keyvaluepair in keyvalue)
                proportions.Add(keyvaluepair.Key, keyvaluepair.Value / collection.Count);
            return proportions;
        }

        static internal Dictionary<double, double> ProportionsPercentages(List<double> collection)
        {
            List<double> list = new List<double>(collection);
            list = RemoveDuplicates(list);
            list.Sort();
            Dictionary<double, double> keyvalue = new Dictionary<double, double>(list.Count);
            for (int i = 0; i < list.Count; i++)
                keyvalue[list[i]] = GetFrequency(collection, list[i]);
            int dim = keyvalue.Count;
            Dictionary<double, double> proportions = Proportions(collection);
            foreach (KeyValuePair<double, double> keyvaluepair in keyvalue)
                proportions[keyvaluepair.Key] = (keyvaluepair.Value / collection.Count) * 100;
            return proportions;
        }

        static internal Dictionary<double, int> CumulativeFrequencies(List<double> collection)
        {
            List<double> list = new List<double>(collection);
            list = RemoveDuplicates(list);
            list.Sort();
            Dictionary<double, int> keyvalue = new Dictionary<double, int>(list.Count);
            for (int i = 0; i < list.Count; i++)
                keyvalue[list[i]] = GetFrequency(collection, list[i]);
            double[] keys = new double[keyvalue.Keys.Count];
            keyvalue.Keys.CopyTo(keys, 0);
            for (int i = 0; i < keys.Length; i++)
                keyvalue[keys[i]] += (i - 1 < 0 ? 0 : keyvalue[keys[i - 1]]);
            return keyvalue;
        }

        static internal Dictionary<double, double> CumulativeFrequenciesPercentages(List<double> collection)
        {
            Dictionary<double, int> keyvalue = CumulativeFrequencies(collection);
            int dim = keyvalue.Count;
            Dictionary<double, double> keypercentage = new Dictionary<double, double>();
            foreach (KeyValuePair<double, int> keyvaluepair in keyvalue)
                keypercentage.Add(keyvaluepair.Key, (keyvaluepair.Value * 100.0) / collection.Count);
            return keypercentage;
        }

        static internal double[] MedianOrdinal(List<double> collection)
        {
            List<double> list = new List<double>(collection);
            list.Sort();
            if (list.Count % 2 == 0)
                //even
                return new double[] { list[(list.Count / 2) - 1],
                    list[((list.Count / 2) + 1) -1] };
            else
                //odd
                return new double[] { list[((list.Count + 1) / 2) - 1] };
        }

        static internal double[] Quartiles(List<double> collection)
        {
            List<double> list = new List<double>(collection);
            list.Sort();
            return new double[] {
                Math.Floor(Convert.ToDouble(((1.0 / 4.0) * (list.Count + 1)) - 1)) < 0 ? list[0] : list[Convert.ToInt32(Math.Floor(Convert.ToDouble(((1.0 / 4.0) * (list.Count + 1)) - 1)))],
                Math.Floor(Convert.ToDouble(((2.0 / 4.0) * (list.Count + 1)) - 1)) < 0 ? list[0] : list[Convert.ToInt32(Math.Floor(Convert.ToDouble(((2.0 / 4.0) * (list.Count + 1)) - 1)))],
                Math.Floor(Convert.ToDouble(((3.0 / 4.0) * (list.Count + 1)) - 1)) < 0 ? list[0] : list[Convert.ToInt32(Math.Floor(Convert.ToDouble(((3.0 / 4.0) * (list.Count + 1)) - 1)))] };
        }

        static internal double XPercentile(List<double> collection, short xpercentile)
        {
            List<double> list = new List<double>(collection);
            list.Sort();
            int index = Convert.ToInt32(Math.Floor(((double)list.Count * (double)xpercentile) / 100.0));
            return list[index <= 0 ? 0 : (index - 1)];
        }

        static internal double PercentileRank(List<double> collection, double key)
        {
            Dictionary<double, int> dict = CumulativeFrequencies(collection);
            if (dict.ContainsKey(key))
                return (dict[key] / (double)collection.Count) * 100.0;
            else
                return 0;
        }

        #endregion Significant Statistics for Ordinal Scales

        #region Significant Statistics for Interval and Ratio Scales

        static internal double Mean(List<double> collection)
        { return Sum(collection) / collection.Count; }

        static internal double MedianInterval(List<double> collection)
        {
            List<double> list = new List<double>(collection);
            list.Sort();
            if (list.Count % 2 == 0)
                //even
                return Mean(new List<double>(new double[] { list[(list.Count / 2) - 1], list[((list.Count / 2) + 1) - 1] }));
            else
                //odd
                return list[((list.Count + 1) / 2) - 1];
        }

        static internal double Range(List<double> collection)
        {
            List<double> list = new List<double>(collection);
            list.Sort();
            return list[list.Count - 1] - list[0];
        }

        static internal double InterquartileDifference(List<double> collection)
        {
            double[] quartiles = Quartiles(collection);
            return quartiles[2] - quartiles[0];
        }

        static internal double Deviance(List<double> collection)
        {
            double sumOfSquares = 0;
            double mean = Mean(collection);
            foreach (double item in collection)
                sumOfSquares += Math.Pow(item - mean, 2);
            return sumOfSquares;
        }

        static internal double Deviance(List<double> collection, double mean)
        {
            double sumOfSquares = 0;
            foreach (double item in collection)
                sumOfSquares += Math.Pow(item - mean, 2);
            return sumOfSquares;
        }

        static internal double VariancePopulation(List<double> collection)
        { return Deviance(collection) / collection.Count; }

        static internal double VariancePopulation(double deviance, int n)
        { return deviance / n; }

        static internal double VarianceSample(List<double> collection)
        { return Deviance(collection) / (collection.Count - 1); }

        static internal double VarianceSample(double deviance, int n)
        { return deviance / (n - 1); }

        static internal double StandardDeviationPopulation(List<double> collection)
        { return Math.Sqrt(VariancePopulation(collection)); }

        static internal double StandardDeviationSample(List<double> collection)
        { return Math.Sqrt(VarianceSample(collection)); }

        static internal double StandardDeviation(double variance)
        { return Math.Sqrt(variance); }

        static internal double CoefficientOfVariationPopulation(List<double> collection)
        { return StandardDeviationPopulation(collection) / Math.Abs(Mean(collection)); }

        static internal double CoefficientOfVariationPopulation(double standardDeviationPopulation, double mean)
        { return standardDeviationPopulation / Math.Abs(mean); }

        static internal double CoefficientOfVariationSample(List<double> collection)
        { return StandardDeviationSample(collection) / Math.Abs(Mean(collection)); }

        static internal double CoefficientOfVariationSample(double standardDeviationSample, double mean)
        { return standardDeviationSample / Math.Abs(mean); }

        static internal double ZScore(List<double> collection, double item)
        { return (item - Mean(collection)) / StandardDeviationPopulation(collection); }

        static internal double ZScore(double mean, double standardDeviation, double item)
        { return (item - mean) / standardDeviation; }

        static internal double TScore(double zscore, double mean, double standardDeviation)
        { return mean + zscore * standardDeviation; }

        #endregion Significant Statistics for Interval and Ratio Scales

        #endregion Descriptive Statistics

        #region Combinatorics

        static internal double FactorialOf(long n)
        {
            if (n < 0)
                return 1;
            double fact = 1;
            for (long i = n; i > 0; i--)
                fact *= i;
            return fact;
        }

        static internal double BinomialCoefficient(long n, long k)
        { return FactorialOf(n) / (FactorialOf(k) * FactorialOf(n - k)); }

        #endregion Combinatorics

        #region Probability Distributions

        static internal ClassSet<ClassSet<string>> MainEvents(BindingList<ClassSet<string>> sets)
        {
            ClassSet<ClassSet<string>> mainEvents = new ClassSet<ClassSet<string>>('X');
            foreach (ClassSet<string> set in sets)
            {
                bool alreadyPresent = false;
                foreach (ClassSet<string> ev in mainEvents.Elements)
                    if (set.Cardinality == ev.Cardinality)
                        alreadyPresent = true;
                if (!alreadyPresent)
                    mainEvents.Elements.Add(set);
            }
            return mainEvents;
        }

        #endregion Probability Distributions

        #region Parametric Distributions

        #region Discrete

        static internal double[] BinomialDistribution(long n, double p)
        {
            double[] probabilities = new double[n];
            for (uint i = 0; i < probabilities.Length; i++)
                probabilities[i] = BinomialCoefficient(n, i) * Math.Pow(p, i) * Math.Pow((1 - p), n - i);
            return probabilities;
        }

        static internal double[] HypergeometricDistribution(long Q, long q, long n)
        {
            double[] probabilities = new double[n + 1];
            for (uint i = 0; i < probabilities.Length; i++)
                probabilities[i] = FactorialOf(n) * BinomialCoefficient(q, i) * BinomialCoefficient(Q - q, n - i) * (FactorialOf(Q - n) / FactorialOf(Q));
            return probabilities;
        }

        #endregion Discrete

        #region Continuous

        static internal double NormalDistributionValue(double value, double mean, double variance)
        { return (1 / (Math.Sqrt(variance) * Math.Sqrt(2 * Math.PI))) * Math.Pow(Math.E, -(Math.Pow((value - mean), 2) / (2 * variance))); }

        #endregion Continuous

        #endregion Parametric Distributions

        #region Covariance and Correlation

        static internal double Covariance(List<double> firstVariable, List<double> secondVariable)
        {
            if (firstVariable == null || secondVariable == null)
                return Double.NaN;
            double meanFirstVariable = Mean(firstVariable);
            double meanSecondVariable = Mean(secondVariable);
            List<double> listOfProducts = new List<double>();
            for (int i = 0; i < firstVariable.Count; i++)
                listOfProducts.Add((firstVariable[i] - meanFirstVariable) * (secondVariable[i] - meanSecondVariable));
            return Sum(listOfProducts) / (firstVariable.Count - 1);
        }

        static internal double Correlation(List<double> firstVariable, List<double> secondVariable)
        {
            if (firstVariable == null || secondVariable == null)
                return Double.NaN;
            return Covariance(firstVariable, secondVariable) / (StandardDeviationSample(firstVariable) * StandardDeviationSample(secondVariable));
        }

        #endregion Covariance and Correlation
    }
}